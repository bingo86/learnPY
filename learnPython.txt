1.列表生成式
    列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式
    示例：生成[1,2,3...10]
    list(range(1,11))
    示例2：生成[1X1,2X2,...10X10]
    [x*x for x in range(1,11)]
    或者
        L=[]
        for x in range(1,11):
            L.append(x*x)
        L
    for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方
        示例：生成偶数平方
    运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现。
        示例：显示当前目录下的所有文件和目录名
        import os #需要导入OS模块
        [d for d in os.listdir('.')]  os.listdir可以列出当前目录
    for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value
        示例：d={'x':'A','y':'B','z':'C'}
        for k,v in d.items():
            print(k,'=',v)
    列表生成式也可以使用两个变量来生成list
        >>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
        >>> [k+'='+v for k,v in d.items()]
            ['y=B', 'x=A', 'z=C']
    把list中所有字符串变成小写
         L = [', 'World', 'IBM', 'Apple']
         [s.lower() for s in L]
    示例：生成一个List其中包含整数与字符串，如果字符串中包含大写字母则将其转换成为小写，若为数字则忽略
         L = ['Hello', 'World', 18, 'Apple', None]
         [s.lower() for s in L if isinstance(s,str)]  #通过isinstance判断获取的内容是否为字符串
    方法一只会对字符串进行操作，对非字符串不做处理也不会输出
         [s.lower() if isinstance(s,str) else s for s in L]
    方法二，先判断是否为字符串，为字符串则处理，非字符串则将原数值输出


2.生成器
    通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。

    所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。

    要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
    创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。

    我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？

    如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值
    示例：
        g=(x*x for x in range(1,11))
        for n in g:
            print(n)
     示例：生成斐波那契数列数列
        #!/usr/bin/python
        #-*-coding utf-8
        def fib(max):
            n,a,b=0,0,1     #此赋值语句相当于t=(0,0,1)，n=t[0] a=t[1] b=t[2]
            while n < max:
                print(b)
                a,b=b,a+b   #此赋值语句相当于t=(b,a+b)，a=t[0] b=t[1]
                n=n+1
            return 'Done'
    上面的函数和generator仅一步之遥，要把fib函数编程generator，只需要把print(b)改为yield b即可。
    示例：使用generator实现斐波那切数列
        #!/usr/bin/python
        #-*-coding utf-8
        def fib(max):
            n,a,b=0,0,1     #此赋值语句相当于t=(0,0,1)，n=t[0] a=t[1] b=t[2]
            while n < max:
                yield b
                a,b=b,a+b   #此赋值语句相当于t=(b,a+b)，a=t[0] b=t[1]
                n=n+1
            return 'Done'

3.map/reduce
    map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
    举例说明，比如我们有一个函数f(x)=x2，要把这个函数作用在一个list [1, 2, 3, 4, 5, 6, 7, 8, 9]上，就可以用map()实现如下：
    def f(x):
    ...     return x * x
    ...
    r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
    list(r)
    [1, 4, 9, 16, 25, 36, 49, 64, 81]
    map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。
    map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：
    list(map(str,[1,2,3,4,5]))
    ['1','2','3','4','5']
    reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：
    reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
    示例：把序列[1, 3, 5, 7, 9]变换成整数13579

    >>> from functools import reduce
    >>> def fn(x, y):
    ...     return x * 10 + y
    ...
    >>> reduce(fn, [1, 3, 5, 7, 9])

    这个例子本身没多大用处，但是，如果考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()，我们就可以写出把str转换为int的函数：
    from functools import reduce

    DIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}

    def str2int(s):
        def fn(x, y):
            return x * 10 + y
        def char2num(s):
            return DIGITS[s]
    return reduce(fn, map(char2num, s))

    示例：利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字
        #!/usr/bin/python
        #-*-coding utf8 -*-
        def upToLower(s):
            def capti(x):
                return x.capitalize()
            return map(capti,s)
    示例：请编写一个prod()函数，可以接受一个list并利用reduce()求积
        #!/usr/bin/python
        #-*-coding utf8-*-
        def prod(L):
            def cheng(x,y):
                return x*y
            return reduce(cheng,L)
        from prod import prod
        prod([1,2,3,4])
        24
    示例：利用map和reduce编写一个str2float函数，把字符串'123.456'转换成浮点数123.456
        #!/usr/bin/python
        #-*-coding utf8-*-
        from __future__ import division    #利用_future_模块里的division方法可以实现整数相除获取小数位的操作
        def str2float(s):
            def fn(x,y):
                return x*10+y
            n=s.index('.')
            s1=list(map(int,[x for x in s[:n]]))    #利用切片方法将传入的S字符串从定位到的小数点位开始进行切分，获取整数位
            s2=list(map(int,[x for x in s[n+1:]]))
            return reduce(fn,s1) + reduce(fn,s2)/10**len(s2)
            print('123.4567=',str2float('123.4567'))

